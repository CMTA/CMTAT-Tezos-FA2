parameter (or (address %freeze_account) (or (address %unfreeze_account) (pair %validate_transfer (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))));
storage   (pair (address %administrator) (big_map %frozen_accounts address unit));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        SWAP;       # @storage : @parameter%freeze_account
        # == freeze_account ==
        # sp.verify(sp.sender == self.data.administrator, 'ADM_NOT_ADMIN') # @storage : @parameter%freeze_account
        DUP;        # @storage : @storage : @parameter%freeze_account
        DUG 2;      # @storage : @parameter%freeze_account : @storage
        CAR;        # address : @parameter%freeze_account : @storage
        SENDER;     # @sender : address : @parameter%freeze_account : @storage
        COMPARE;    # int : @parameter%freeze_account : @storage
        EQ;         # bool : @parameter%freeze_account : @storage
        IF
          {}
          {
            PUSH string "ADM_NOT_ADMIN"; # string : @parameter%freeze_account : @storage
            FAILWITH;   # FAILED
          }; # @parameter%freeze_account : @storage
        SWAP;       # @storage : @parameter%freeze_account
        # self.data.frozen_accounts[params] = sp.unit # @storage : @parameter%freeze_account
        DUP;        # @storage : @storage : @parameter%freeze_account
        CDR;        # big_map address unit : @storage : @parameter%freeze_account
        PUSH (option unit) (Some Unit); # option unit : big_map address unit : @storage : @parameter%freeze_account
        DIG 3;      # @parameter%freeze_account : option unit : big_map address unit : @storage
        UPDATE;     # big_map address unit : @storage
        UPDATE 2;   # @storage
      }
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%unfreeze_account
            # == unfreeze_account ==
            # sp.verify(sp.sender == self.data.administrator, 'ADM_NOT_ADMIN') # @storage : @parameter%unfreeze_account
            DUP;        # @storage : @storage : @parameter%unfreeze_account
            DUG 2;      # @storage : @parameter%unfreeze_account : @storage
            CAR;        # address : @parameter%unfreeze_account : @storage
            SENDER;     # @sender : address : @parameter%unfreeze_account : @storage
            COMPARE;    # int : @parameter%unfreeze_account : @storage
            EQ;         # bool : @parameter%unfreeze_account : @storage
            IF
              {}
              {
                PUSH string "ADM_NOT_ADMIN"; # string : @parameter%unfreeze_account : @storage
                FAILWITH;   # FAILED
              }; # @parameter%unfreeze_account : @storage
            SWAP;       # @storage : @parameter%unfreeze_account
            # del self.data.frozen_accounts[params] # @storage : @parameter%unfreeze_account
            DUP;        # @storage : @storage : @parameter%unfreeze_account
            CDR;        # big_map address unit : @storage : @parameter%unfreeze_account
            NONE unit;  # option unit : big_map address unit : @storage : @parameter%unfreeze_account
            DIG 3;      # @parameter%unfreeze_account : option unit : big_map address unit : @storage
            UPDATE;     # big_map address unit : @storage
            UPDATE 2;   # @storage
          }
          {
            # == validate_transfer ==
            # for tx in params.txs: ... # @parameter%validate_transfer : @storage
            DUP;        # @parameter%validate_transfer : @parameter%validate_transfer : @storage
            CDR;        # list (pair (address %to_) (pair (nat %token_id) (nat %amount))) : @parameter%validate_transfer : @storage
            ITER
              {
                # sp.verify(~ (self.data.frozen_accounts.contains(params.from_)), 'CM_CANNOT_TRANSFER') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                DUP 3;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                CDR;        # big_map address unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                DUP 3;      # @parameter%validate_transfer : big_map address unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                CAR;        # address : big_map address unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                IF
                  {
                    PUSH string "CM_CANNOT_TRANSFER"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                # sp.verify(~ (self.data.frozen_accounts.contains(tx.to_)), 'CM_CANNOT_TRANSFER') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                DUP 3;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                CDR;        # big_map address unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%validate_transfer : @storage
                SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map address unit : @parameter%validate_transfer : @storage
                CAR;        # address : big_map address unit : @parameter%validate_transfer : @storage
                MEM;        # bool : @parameter%validate_transfer : @storage
                IF
                  {
                    PUSH string "CM_CANNOT_TRANSFER"; # string : @parameter%validate_transfer : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%validate_transfer : @storage
              }; # @parameter%validate_transfer : @storage
            DROP;       # @storage
          }; # @storage
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };