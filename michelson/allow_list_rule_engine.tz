parameter (pair %validate_transfer (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))));
storage   (big_map address unit);
code
  {
    UNPAIR;     # @parameter : @storage
    # == validate_transfer ==
    # for tx in params.txs: ... # @parameter : @storage
    DUP;        # @parameter : @parameter : @storage
    CDR;        # list (pair (address %to_) (pair (nat %token_id) (nat %amount))) : @parameter : @storage
    ITER
      {
        # sp.verify(self.data.allow_list.contains(params.from_), 'CM_CANNOT_TRANSFER') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
        DUP 3;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
        DUP 3;      # @parameter : @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
        CAR;        # address : @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
        MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
        IF
          {}
          {
            PUSH string "CM_CANNOT_TRANSFER"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
            FAILWITH;   # FAILED
          }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
        # sp.verify(self.data.allow_list.contains(tx.to_), 'CM_CANNOT_TRANSFER') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
        DUP 3;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter : @storage
        SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @storage : @parameter : @storage
        CAR;        # address : @storage : @parameter : @storage
        MEM;        # bool : @parameter : @storage
        IF
          {}
          {
            PUSH string "CM_CANNOT_TRANSFER"; # string : @parameter : @storage
            FAILWITH;   # FAILED
          }; # @parameter : @storage
      }; # @parameter : @storage
    DROP;       # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };